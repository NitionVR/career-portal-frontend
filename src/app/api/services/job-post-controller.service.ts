/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { archiveJobPost } from '../fn/job-post-controller/archive-job-post';
import { ArchiveJobPost$Params } from '../fn/job-post-controller/archive-job-post';
import { closeJobPost } from '../fn/job-post-controller/close-job-post';
import { CloseJobPost$Params } from '../fn/job-post-controller/close-job-post';
import { createJobPost } from '../fn/job-post-controller/create-job-post';
import { CreateJobPost$Params } from '../fn/job-post-controller/create-job-post';
import { deleteJobPost } from '../fn/job-post-controller/delete-job-post';
import { DeleteJobPost$Params } from '../fn/job-post-controller/delete-job-post';
import { getAvailableTransitions } from '../fn/job-post-controller/get-available-transitions';
import { GetAvailableTransitions$Params } from '../fn/job-post-controller/get-available-transitions';
import { getJobPost } from '../fn/job-post-controller/get-job-post';
import { GetJobPost$Params } from '../fn/job-post-controller/get-job-post';
import { getStateHistory } from '../fn/job-post-controller/get-state-history';
import { GetStateHistory$Params } from '../fn/job-post-controller/get-state-history';
import { JobPostResponse } from '../models/job-post-response';
import { listJobPosts } from '../fn/job-post-controller/list-job-posts';
import { ListJobPosts$Params } from '../fn/job-post-controller/list-job-posts';
import { listMyJobPosts } from '../fn/job-post-controller/list-my-job-posts';
import { ListMyJobPosts$Params } from '../fn/job-post-controller/list-my-job-posts';
import { PageJobPostResponse } from '../models/page-job-post-response';
import { publishJobPost } from '../fn/job-post-controller/publish-job-post';
import { PublishJobPost$Params } from '../fn/job-post-controller/publish-job-post';
import { reopenJobPost } from '../fn/job-post-controller/reopen-job-post';
import { ReopenJobPost$Params } from '../fn/job-post-controller/reopen-job-post';
import { StateAuditResponse } from '../models/state-audit-response';
import { transitionState } from '../fn/job-post-controller/transition-state';
import { TransitionState$Params } from '../fn/job-post-controller/transition-state';
import { updateJobPost } from '../fn/job-post-controller/update-job-post';
import { UpdateJobPost$Params } from '../fn/job-post-controller/update-job-post';
import { updateJobPostStatus } from '../fn/job-post-controller/update-job-post-status';
import { UpdateJobPostStatus$Params } from '../fn/job-post-controller/update-job-post-status';

@Injectable({ providedIn: 'root' })
export class JobPostControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getJobPost()` */
  static readonly GetJobPostPath = '/api/job-posts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getJobPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJobPost$Response(params: GetJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = getJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getJobPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getJobPost(params: GetJobPost$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.getJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `updateJobPost()` */
  static readonly UpdateJobPostPath = '/api/job-posts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateJobPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJobPost$Response(params: UpdateJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = updateJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateJobPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateJobPost(params: UpdateJobPost$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.updateJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `deleteJobPost()` */
  static readonly DeleteJobPostPath = '/api/job-posts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteJobPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteJobPost$Response(params: DeleteJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = deleteJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteJobPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteJobPost(params: DeleteJobPost$Params, context?: HttpContext): Observable<void> {
    const resp = this.deleteJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `listJobPosts()` */
  static readonly ListJobPostsPath = '/api/job-posts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listJobPosts()` instead.
   *
   * This method doesn't expect any request body.
   */
  listJobPosts$Response(params: ListJobPosts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageJobPostResponse>> {
    const obs = listJobPosts(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listJobPosts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listJobPosts(params: ListJobPosts$Params, context?: HttpContext): Observable<PageJobPostResponse> {
    const resp = this.listJobPosts$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PageJobPostResponse>): PageJobPostResponse => r.body)
    );
  }

  /** Path part for operation `createJobPost()` */
  static readonly CreateJobPostPath = '/api/job-posts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createJobPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createJobPost$Response(params: CreateJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = createJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createJobPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createJobPost(params: CreateJobPost$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.createJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `transitionState()` */
  static readonly TransitionStatePath = '/api/job-posts/{id}/transition';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `transitionState()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transitionState$Response(params: TransitionState$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = transitionState(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `transitionState$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  transitionState(params: TransitionState$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.transitionState$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `updateJobPostStatus()` */
  static readonly UpdateJobPostStatusPath = '/api/job-posts/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateJobPostStatus()` instead.
   *
   * This method doesn't expect any request body.
   *
   * @deprecated
   */
  updateJobPostStatus$Response(params: UpdateJobPostStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = updateJobPostStatus(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateJobPostStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   *
   * @deprecated
   */
  updateJobPostStatus(params: UpdateJobPostStatus$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.updateJobPostStatus$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `reopenJobPost()` */
  static readonly ReopenJobPostPath = '/api/job-posts/{id}/reopen';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reopenJobPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  reopenJobPost$Response(params: ReopenJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = reopenJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reopenJobPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  reopenJobPost(params: ReopenJobPost$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.reopenJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `publishJobPost()` */
  static readonly PublishJobPostPath = '/api/job-posts/{id}/publish';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `publishJobPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  publishJobPost$Response(params: PublishJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = publishJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `publishJobPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  publishJobPost(params: PublishJobPost$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.publishJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `closeJobPost()` */
  static readonly CloseJobPostPath = '/api/job-posts/{id}/close';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `closeJobPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  closeJobPost$Response(params: CloseJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = closeJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `closeJobPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  closeJobPost(params: CloseJobPost$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.closeJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `archiveJobPost()` */
  static readonly ArchiveJobPostPath = '/api/job-posts/{id}/archive';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `archiveJobPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  archiveJobPost$Response(params: ArchiveJobPost$Params, context?: HttpContext): Observable<StrictHttpResponse<JobPostResponse>> {
    const obs = archiveJobPost(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `archiveJobPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  archiveJobPost(params: ArchiveJobPost$Params, context?: HttpContext): Observable<JobPostResponse> {
    const resp = this.archiveJobPost$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<JobPostResponse>): JobPostResponse => r.body)
    );
  }

  /** Path part for operation `getStateHistory()` */
  static readonly GetStateHistoryPath = '/api/job-posts/{id}/history';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getStateHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStateHistory$Response(params: GetStateHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StateAuditResponse>>> {
    const obs = getStateHistory(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getStateHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getStateHistory(params: GetStateHistory$Params, context?: HttpContext): Observable<Array<StateAuditResponse>> {
    const resp = this.getStateHistory$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<StateAuditResponse>>): Array<StateAuditResponse> => r.body)
    );
  }

  /** Path part for operation `getAvailableTransitions()` */
  static readonly GetAvailableTransitionsPath = '/api/job-posts/{id}/available-transitions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableTransitions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableTransitions$Response(params: GetAvailableTransitions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    const obs = getAvailableTransitions(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableTransitions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableTransitions(params: GetAvailableTransitions$Params, context?: HttpContext): Observable<Array<string>> {
    const resp = this.getAvailableTransitions$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `listMyJobPosts()` */
  static readonly ListMyJobPostsPath = '/api/job-posts/my-posts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listMyJobPosts()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMyJobPosts$Response(params: ListMyJobPosts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageJobPostResponse>> {
    const obs = listMyJobPosts(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listMyJobPosts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listMyJobPosts(params: ListMyJobPosts$Params, context?: HttpContext): Observable<PageJobPostResponse> {
    const resp = this.listMyJobPosts$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PageJobPostResponse>): PageJobPostResponse => r.body)
    );
  }

}
