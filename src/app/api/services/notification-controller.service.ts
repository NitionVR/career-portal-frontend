/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNotification } from '../fn/notification-controller/create-notification';
import { CreateNotification$Params } from '../fn/notification-controller/create-notification';
import { getUnreadCount } from '../fn/notification-controller/get-unread-count';
import { GetUnreadCount$Params } from '../fn/notification-controller/get-unread-count';
import { getUserNotifications } from '../fn/notification-controller/get-user-notifications';
import { GetUserNotifications$Params } from '../fn/notification-controller/get-user-notifications';
import { markAllAsRead } from '../fn/notification-controller/mark-all-as-read';
import { MarkAllAsRead$Params } from '../fn/notification-controller/mark-all-as-read';
import { markAsRead } from '../fn/notification-controller/mark-as-read';
import { MarkAsRead$Params } from '../fn/notification-controller/mark-as-read';
import { NotificationResponse } from '../models/notification-response';
import { PageNotificationResponse } from '../models/page-notification-response';

@Injectable({ providedIn: 'root' })
export class NotificationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createNotification()` */
  static readonly CreateNotificationPath = '/api/v1/notifications';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNotification()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNotification$Response(params: CreateNotification$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationResponse>> {
    const obs = createNotification(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNotification$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNotification(params: CreateNotification$Params, context?: HttpContext): Observable<NotificationResponse> {
    const resp = this.createNotification$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<NotificationResponse>): NotificationResponse => r.body)
    );
  }

  /** Path part for operation `markAsRead()` */
  static readonly MarkAsReadPath = '/api/v1/notifications/{notificationId}/read';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead$Response(params: MarkAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = markAsRead(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAsRead(params: MarkAsRead$Params, context?: HttpContext): Observable<void> {
    const resp = this.markAsRead$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `markAllAsRead()` */
  static readonly MarkAllAsReadPath = '/api/v1/notifications/user/{userId}/read-all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `markAllAsRead()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAllAsRead$Response(params: MarkAllAsRead$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    const obs = markAllAsRead(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `markAllAsRead$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  markAllAsRead(params: MarkAllAsRead$Params, context?: HttpContext): Observable<void> {
    const resp = this.markAllAsRead$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getUserNotifications()` */
  static readonly GetUserNotificationsPath = '/api/v1/notifications/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserNotifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserNotifications$Response(params: GetUserNotifications$Params, context?: HttpContext): Observable<StrictHttpResponse<PageNotificationResponse>> {
    const obs = getUserNotifications(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserNotifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserNotifications(params: GetUserNotifications$Params, context?: HttpContext): Observable<PageNotificationResponse> {
    const resp = this.getUserNotifications$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<PageNotificationResponse>): PageNotificationResponse => r.body)
    );
  }

  /** Path part for operation `getUnreadCount()` */
  static readonly GetUnreadCountPath = '/api/v1/notifications/user/{userId}/unread-count';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUnreadCount()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount$Response(params: GetUnreadCount$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    const obs = getUnreadCount(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUnreadCount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUnreadCount(params: GetUnreadCount$Params, context?: HttpContext): Observable<number> {
    const resp = this.getUnreadCount$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
