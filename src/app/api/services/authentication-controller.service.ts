/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { completeCandiateRegistration } from '../fn/authentication-controller/complete-candiate-registration';
import { CompleteCandiateRegistration$Params } from '../fn/authentication-controller/complete-candiate-registration';
import { completeHiringManagerRegistration } from '../fn/authentication-controller/complete-hiring-manager-registration';
import { CompleteHiringManagerRegistration$Params } from '../fn/authentication-controller/complete-hiring-manager-registration';
import { exchangeOtt } from '../fn/authentication-controller/exchange-ott';
import { ExchangeOtt$Params } from '../fn/authentication-controller/exchange-ott';
import { initiateRegistration } from '../fn/authentication-controller/initiate-registration';
import { InitiateRegistration$Params } from '../fn/authentication-controller/initiate-registration';
import { login } from '../fn/authentication-controller/login';
import { Login$Params } from '../fn/authentication-controller/login';
import { RegistrationResponse } from '../models/registration-response';
import { validateRegistrationToken } from '../fn/authentication-controller/validate-registration-token';
import { ValidateRegistrationToken$Params } from '../fn/authentication-controller/validate-registration-token';

@Injectable({ providedIn: 'root' })
export class AuthenticationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `initiateRegistration()` */
  static readonly InitiateRegistrationPath = '/api/auth/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `initiateRegistration()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateRegistration$Response(params: InitiateRegistration$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    const obs = initiateRegistration(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `initiateRegistration$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateRegistration(params: InitiateRegistration$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    const resp = this.initiateRegistration$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `completeHiringManagerRegistration()` */
  static readonly CompleteHiringManagerRegistrationPath = '/api/auth/register/hiring-manager';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `completeHiringManagerRegistration()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  completeHiringManagerRegistration$Response(params: CompleteHiringManagerRegistration$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    const obs = completeHiringManagerRegistration(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `completeHiringManagerRegistration$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  completeHiringManagerRegistration(params: CompleteHiringManagerRegistration$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    const resp = this.completeHiringManagerRegistration$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `completeCandiateRegistration()` */
  static readonly CompleteCandiateRegistrationPath = '/api/auth/register/candidate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `completeCandiateRegistration()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  completeCandiateRegistration$Response(params: CompleteCandiateRegistration$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: string;
}>> {
    const obs = completeCandiateRegistration(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `completeCandiateRegistration$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  completeCandiateRegistration(params: CompleteCandiateRegistration$Params, context?: HttpContext): Observable<{
[key: string]: string;
}> {
    const resp = this.completeCandiateRegistration$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<{
[key: string]: string;
}>): {
[key: string]: string;
} => r.body)
    );
  }

  /** Path part for operation `login()` */
  static readonly LoginPath = '/api/auth/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `login()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login$Response(params: Login$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    const obs = login(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `login$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login(params: Login$Params, context?: HttpContext): Observable<string> {
    const resp = this.login$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `exchangeOtt()` */
  static readonly ExchangeOttPath = '/api/auth/exchange-ott';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `exchangeOtt()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  exchangeOtt$Response(params: ExchangeOtt$Params, context?: HttpContext): Observable<StrictHttpResponse<RegistrationResponse>> {
    const obs = exchangeOtt(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `exchangeOtt$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  exchangeOtt(params: ExchangeOtt$Params, context?: HttpContext): Observable<RegistrationResponse> {
    const resp = this.exchangeOtt$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<RegistrationResponse>): RegistrationResponse => r.body)
    );
  }

  /** Path part for operation `validateRegistrationToken()` */
  static readonly ValidateRegistrationTokenPath = '/api/auth/validate-registration-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `validateRegistrationToken()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateRegistrationToken$Response(params: ValidateRegistrationToken$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: any;
}>> {
    const obs = validateRegistrationToken(this.http, this.rootUrl, params, context);
    return obs;
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `validateRegistrationToken$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  validateRegistrationToken(params: ValidateRegistrationToken$Params, context?: HttpContext): Observable<{
[key: string]: any;
}> {
    const resp = this.validateRegistrationToken$Response(params, context);
    return resp.pipe(
      map((r: StrictHttpResponse<{
[key: string]: any;
}>): {
[key: string]: any;
} => r.body)
    );
  }

}
