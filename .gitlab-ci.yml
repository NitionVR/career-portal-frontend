stages:
  - validate_iac
  - deploy_app_infra
  - security_scan
  - test
  - build_image
  - deploy_app

variables:
  ECR_REPOSITORY_NAME: etalente-frontend
  ECR_IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  ECR_LATEST_TAG: latest

.aws_base:
  image:
    name: amazon/aws-cli:latest
    entrypoint: ["/usr/bin/env", "bash", "-l", "-c"]
  before_script:
    - aws --version
    - echo "AWS CLI configured for region $AWS_REGION"

validate_iac:
  extends: .aws_base
  stage: validate_iac
  script:
    - echo "Validating CloudFormation templates..."
    - aws cloudformation validate-template --template-body file://aws/cloudformation/application/ecs-service.yaml
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/application/ecs-service.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

deploy_app_infra:
  extends: .aws_base
  stage: deploy_app_infra
  script:
    - echo "Deploying Frontend Application ECS Service stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/application/ecs-service.yaml --stack-name ${ProjectName}-FrontendServiceStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName FrontendImageUri="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_LATEST_TAG}" --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/application/ecs-service.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

security_scan:
  stage: security_scan
  image:
    name: "zricethezav/gitleaks"
    entrypoint: [""]
  script:
    - gitleaks detect --source . --verbose --report-path gitleaks-report.json
  artifacts:
    paths:
      - gitleaks-report.json
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

test_app:
  stage: test
  image: cypress/browsers:node-22.20.0-chrome-140.0.7339.207-1-ff-143.0.1-edge-140.0.3485.81-1
  before_script:
    - npm install
  script:
    - ./node_modules/.bin/ng test --watch=false --browsers=ChromeHeadless
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

build_image:
  stage: build_image
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
  script:
    - |
      IMAGE_URI_COMMIT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG}"
      IMAGE_URI_LATEST="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_LATEST_TAG}"
      echo "Building Docker image..."
      docker build -t $IMAGE_URI_COMMIT -t $IMAGE_URI_LATEST .
      echo "Pushing Docker image to ECR..."
      docker push $IMAGE_URI_COMMIT
      docker push $IMAGE_URI_LATEST
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

deploy_app:
  extends: .aws_base
  stage: deploy_app
  script:
    - echo "Updating ECS service to force a new deployment..."
    - aws ecs update-service --cluster ${ProjectName}-cluster --service ${ProjectName}-frontend-service --force-new-deployment --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      needs:
        - build_image
