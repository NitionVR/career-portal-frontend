stages:
  - .pre
  - validate_iac
  - deploy_app_infra
  - security_scan
  - test
  - build_image
  - deploy_app
  - mirror

variables:
  ECR_REPOSITORY_NAME: etalente-frontend
  ECR_IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  ECR_LATEST_TAG: latest

# Add default tags to use your macOS group runner
default:
  tags:
    - docker
    - group-runner

# ===== NEW: Test Chrome Location =====
test_chrome_location:
  stage: .pre
  image: cypress/browsers:node-22.20.0-chrome-140.0.7339.207-1-ff-143.0.1-edge-140.0.3485.81-1
  script:
    - echo "=== Searching for Chrome binaries ==="
    - find /usr -name "*chrome*" -type f 2>/dev/null | head -20
    - echo ""
    - echo "=== Checking common locations ==="
    - ls -la /usr/bin/google-chrome* 2>/dev/null || echo "[NOT FOUND] Not in /usr/bin/google-chrome*"
    - ls -la /opt/google/chrome* 2>/dev/null || echo "[NOT FOUND] Not in /opt/google/chrome*"
    - ls -la /usr/bin/chromium* 2>/dev/null || echo "[NOT FOUND] Not in /usr/bin/chromium*"
    - echo ""
    - echo "=== Using 'which' command ==="
    - which google-chrome-stable && echo "[FOUND] google-chrome-stable at $(which google-chrome-stable)" || echo "[NOT FOUND] google-chrome-stable not found"
    - which google-chrome && echo "[FOUND] google-chrome at $(which google-chrome)" || echo "[NOT FOUND] google-chrome not found"
    - which chromium && echo "[FOUND] chromium at $(which chromium)" || echo "[NOT FOUND] chromium not found"
    - which chrome && echo "[FOUND] chrome at $(which chrome)" || echo "[NOT FOUND] chrome not found"
    - echo ""
    - echo "=== Testing Chrome execution ==="
    - if [ -f /usr/bin/google-chrome-stable ]; then /usr/bin/google-chrome-stable --version; fi
    - if [ -f /usr/bin/google-chrome ]; then /usr/bin/google-chrome --version; fi
    - if [ -f /opt/google/chrome/chrome ]; then /opt/google/chrome/chrome --version; fi
    - echo ""
    - echo "=== Environment variables ==="
    - env | grep -i chrome || echo "No CHROME env vars set"
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  allow_failure: true

.aws_base:
  image:
    name: amazon/aws-cli:latest
    entrypoint: ["/usr/bin/env", "bash", "-l", "-c"]
  before_script:
    - aws --version
    - echo "AWS CLI configured for region $AWS_REGION"

validate_iac:
  extends: .aws_base
  stage: validate_iac
  script:
    - echo "Validating CloudFormation templates..."
    - aws cloudformation validate-template --template-body file://aws/cloudformation/application/ecs-service.yaml
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/application/ecs-service.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

deploy_app_infra:
  extends: .aws_base
  stage: deploy_app_infra
  script:
    - echo "Deploying Frontend Application ECS Service stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/application/ecs-service.yaml --stack-name ${ProjectName}-FrontendServiceStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName FrontendImageUri="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_LATEST_TAG}" --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/application/ecs-service.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

security_scan:
  stage: security_scan
  image:
    name: "zricethezav/gitleaks"
    entrypoint: [""]
  script:
    - gitleaks detect --source . --verbose --report-path gitleaks-report.json
  artifacts:
    paths:
      - gitleaks-report.json
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

test_app:
  stage: test
  image: cypress/browsers:node-22.20.0-chrome-140.0.7339.207-1-ff-143.0.1-edge-140.0.3485.81-1
  before_script:
    - echo "=== Installing Chromium via Puppeteer ==="
    - npm install --legacy-peer-deps
    - npm install puppeteer --legacy-peer-deps
    - npx puppeteer browsers install chrome
    - export CHROME_BIN=$(find ~/.cache/puppeteer -name "chrome" -type f 2>/dev/null | head -1)
    - if [ -z "$CHROME_BIN" ]; then export CHROME_BIN=$(find /root/.cache/puppeteer -name "chrome" -type f 2>/dev/null | head -1); fi
    - echo "$CHROME_BIN"
    - $CHROME_BIN --version || echo "Chrome not executable"
  script:
    - ./node_modules/.bin/ng test --watch=false --browsers=ChromeHeadlessCI
  artifacts:
    reports:
      junit: junit.xml
    when: always
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

build_image:
  stage: build_image
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
  script:
    - |
      IMAGE_URI_COMMIT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG}"
      IMAGE_URI_LATEST="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_LATEST_TAG}"
      echo "Building Docker image..."
      docker build -t $IMAGE_URI_COMMIT -t $IMAGE_URI_LATEST .
      echo "Pushing Docker image to ECR..."
      docker push $IMAGE_URI_COMMIT
      docker push $IMAGE_URI_LATEST
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

deploy_app:
  extends: .aws_base
  stage: deploy_app
  script:
    - echo "Updating ECS service to force a new deployment..."
    - aws ecs update-service --cluster ${ProjectName}-cluster --service ${ProjectName}-frontend-service --force-new-deployment --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      needs:
        - build_image

mirror_to_github:
  stage: mirror
  image: alpine:latest
  variables:
    GIT_DEPTH: 0
  before_script:
    - apk add --no-cache git openssh
    - git config --global user.email "$GITHUB_EMAIL"
    - git config --global user.name "$GITHUB_USERNAME"
  script:
    - git remote add github https://$GITHUB_TOKEN@github.com/$GITHUB_USERNAME/$GITHUB_PROJECT_FRONTEND.git || true
    - git push github HEAD:refs/heads/main --force
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_TAG =~ /^mirror-/'
  allow_failure: true
