stages:
  - validate_iac
  - deploy_app_infra
  - security_scan
  - test
  - build_image
  - deploy_app
  - mirror

variables:
  ECR_REPOSITORY_NAME: etalente-frontend
  ECR_IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  ECR_LATEST_TAG: latest

default:
  tags:
    - docker
    - group-runner

.aws_base:
  before_script:
    - aws --version
    - echo "AWS CLI configured for region $AWS_REGION"

validate_iac:
  extends: .aws_base
  stage: validate_iac
  script:
    - echo "Validating CloudFormation templates..."
    - aws cloudformation validate-template --template-body file://aws/cloudformation/application/ecs-service.yaml
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/application/ecs-service.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

deploy_app_infra:
  extends: .aws_base
  stage: deploy_app_infra
  script:
    - echo "Deploying Frontend Application ECS Service stack..."
    - aws cloudformation deploy --template-file aws/cloudformation/application/ecs-service.yaml --stack-name ${ProjectName}-FrontendServiceStack --capabilities CAPABILITY_IAM --parameter-overrides ProjectName=$ProjectName FrontendImageUri="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_LATEST_TAG}" --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      changes:
        - aws/cloudformation/application/ecs-service.yaml
    - if: '$CI_COMMIT_TAG =~ /^infra-/'

security_scan:
  stage: security_scan
  before_script:
    - brew install gitleaks || echo "gitleaks already installed"
  script:
    - gitleaks detect --source . --verbose --report-path gitleaks-report.json
  artifacts:
    paths:
      - gitleaks-report.json
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

test_app:
  stage: test
  before_script:
    - node --version
    - npm --version
    # Auto-detect Chrome on macOS
    - |
      if [ -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
        export CHROME_BIN="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
      elif which google-chrome-stable >/dev/null 2>&1; then
        export CHROME_BIN=$(which google-chrome-stable)
      elif which chromium >/dev/null 2>&1; then
        export CHROME_BIN=$(which chromium)
      fi
    - echo "Using Chrome at: $CHROME_BIN"
    - "$CHROME_BIN" --version || true
    - npm install --legacy-peer-deps
  script:
    - npm run test -- --watch=false --browsers=ChromeHeadlessCI
  artifacts:
    reports:
      junit: junit.xml
    when: always
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

build_image:
  stage: build_image
  before_script:
    - docker --version
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
  script:
    - |
      IMAGE_URI_COMMIT="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_IMAGE_TAG}"
      IMAGE_URI_LATEST="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${ECR_LATEST_TAG}"
      echo "Building Docker image..."
      docker build -t $IMAGE_URI_COMMIT -t $IMAGE_URI_LATEST .
      echo "Pushing Docker image to ECR..."
      docker push $IMAGE_URI_COMMIT
      docker push $IMAGE_URI_LATEST
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

deploy_app:
  extends: .aws_base
  stage: deploy_app
  script:
    - echo "Updating ECS service to force a new deployment..."
    - aws ecs update-service --cluster ${ProjectName}-cluster --service ${ProjectName}-frontend-service --force-new-deployment --region $AWS_REGION
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      needs:
        - build_image

mirror_to_github:
  stage: mirror
  variables:
    GIT_DEPTH: 0
  before_script:
    - git config --global user.email "$GITHUB_EMAIL"
    - git config --global user.name "$GITHUB_USERNAME"
  script:
    - git remote add github https://$GITHUB_TOKEN@github.com/$GITHUB_USERNAME/$GITHUB_PROJECT_FRONTEND.git || true
    - git push github HEAD:refs/heads/main --force
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_TAG =~ /^mirror-/'
  allow_failure: true
