Perfect! Now let's connect them. Here's your step-by-step guide:

üéØ Step 1: Get Your ALB DNS Name
bash
aws cloudformation describe-stacks \
  --stack-name etalente-AlbStack \
  --region af-south-1 \
  --query "Stacks[0].Outputs[?OutputKey=='AlbDnsName'].OutputValue" \
  --output text
Save this DNS name! It should look like:

text
etalente-alb-665506398.af-south-1.elb.amazonaws.com
üîß Step 2: Update Backend CORS Settings
The backend needs to allow requests from the ALB domain.

Update GitLab CI/CD Variable:
Go to GitLab ‚Üí Settings ‚Üí CI/CD ‚Üí Variables

Update or add:

text
CORS_ALLOWED_ORIGINS = http://etalente-alb-665506398.af-south-1.elb.amazonaws.com
(Replace with your actual ALB DNS from Step 1)

üöÄ Step 3: Redeploy Backend with Updated CORS
Trigger a redeployment to pick up the new CORS settings:

bash
# Option A: Push to main branch
git commit --allow-empty -m "Update CORS for ALB communication"
git push origin main

# Option B: Or manually update the stack
aws cloudformation deploy \
  --template-file aws/cloudformation/application/ecs-service.yaml \
  --stack-name etalente-BackendServiceStack \
  --capabilities CAPABILITY_IAM \
  --parameter-overrides \
    ProjectName=etalente \
    BackendImageUri="YOUR_ACCOUNT_ID.dkr.ecr.af-south-1.amazonaws.com/etalente-backend:latest" \
    DesiredCount=1 \
    AttachLoadBalancer=true \
    DBMasterUserPassword="YOUR_DB_PASSWORD" \
    JwtSecret="YOUR_JWT_SECRET" \
    MagicLinkUrl="http://etalente-alb-665506398.af-south-1.elb.amazonaws.com/auth/verify" \
    InvitationLinkUrl="http://etalente-alb-665506398.af-south-1.elb.amazonaws.com/invitations/accept" \
    NovuApiKey="YOUR_NOVU_KEY" \
    CorsAllowedOrigins="http://etalente-alb-665506398.af-south-1.elb.amazonaws.com" \
    InvitationExpiryHours="72" \
  --region af-south-1
üåê Step 4: Update Frontend Environment Configuration
Your Angular frontend needs to know where the backend API is.

Option A: Build-time Configuration (Rebuild Required)
Update src/environments/environment.prod.ts:

typescript
export const environment = {
  production: true,
  apiUrl: 'http://etalente-alb-665506398.af-south-1.elb.amazonaws.com/api'
};
Then rebuild and redeploy the frontend.

Option B: Runtime Configuration (No Rebuild Needed)
Create a configuration file that Nginx serves:

1. Create src/assets/config.json:

json
{
  "apiUrl": "http://etalente-alb-665506398.af-south-1.elb.amazonaws.com/api"
}
2. Update your Angular app to load this at startup:

typescript
// src/app/app.config.ts or app.module.ts
import { APP_INITIALIZER } from '@angular/core';
import { HttpClient } from '@angular/common/http';

export function loadConfig(http: HttpClient) {
  return () => http.get('/assets/config.json')
    .toPromise()
    .then((config: any) => {
      // Store config globally
      (window as any).config = config;
    });
}

// In your providers array:
providers: [
  {
    provide: APP_INITIALIZER,
    useFactory: loadConfig,
    deps: [HttpClient],
    multi: true
  }
]
3. Use it in your services:

typescript
// In your API service
const apiUrl = (window as any).config?.apiUrl || 'http://localhost:8080/api';
‚úÖ Step 5: Test the Communication
Test 1: Backend Health Check
bash
curl http://etalente-alb-665506398.af-south-1.elb.amazonaws.com/api/actuator/health
Expected response:

json
{"status":"UP"}
Test 2: Backend Public Endpoint
bash
curl http://etalente-alb-665506398.af-south-1.elb.amazonaws.com/api/job-posts
Should return job posts data or empty array.

Test 3: Frontend Loads
Open in browser:

text
http://etalente-alb-665506398.af-south-1.elb.amazonaws.com
You should see your Angular app.

Test 4: Frontend ‚Üí Backend Communication
Open browser console (F12) and check:

Network tab shows API calls to /api/*
No CORS errors
API responses are successful
üêõ Troubleshooting:
Issue: CORS Errors in Browser Console
text
Access to XMLHttpRequest at 'http://...alb.../api/...' from origin 'http://...alb...' has been blocked by CORS policy
Fix:

Verify CORS_ALLOWED_ORIGINS includes the ALB DNS (no trailing slash)
Check backend logs:
bash
aws logs tail /ecs/etalente-backend --follow --region af-south-1
Issue: 502 Bad Gateway
The ALB can't reach the backend.

Fix:

Check backend service is running:
bash
aws ecs describe-services \
  --cluster etalente-cluster \
  --services etalente-backend-service \
  --region af-south-1 \
  --query 'services[0].{Running:runningCount,Desired:desiredCount,Status:status}'
Check target health:
bash
aws elbv2 describe-target-health \
  --target-group-arn $(aws cloudformation describe-stacks \
    --stack-name etalente-AlbStack \
    --query "Stacks[0].Outputs[?OutputKey=='BackendTargetGroupArn'].OutputValue" \
    --output text --region af-south-1) \
  --region af-south-1
Issue: Frontend Shows 404
The ALB is routing / to the wrong place.

Fix: Verify ALB listener rules are correct (frontend should be default, backend should match /api/*).

üìä Step 6: Verify Everything Works
Create a simple test script:

bash
#!/bin/bash
ALB_DNS="etalente-alb-665506398.af-south-1.elb.amazonaws.com"

echo "Testing Backend Health..."
curl -s http://$ALB_DNS/api/actuator/health | jq

echo -e "\nTesting Backend API..."
curl -s http://$ALB_DNS/api/job-posts | jq

echo -e "\nTesting Frontend..."
curl -s -I http://$ALB_DNS | grep HTTP

echo -e "\nAll tests complete!"
üéØ Quick Recap:
‚úÖ Get ALB DNS name
‚úÖ Update CORS_ALLOWED_ORIGINS GitLab variable
‚úÖ Redeploy backend (push to main or manual deploy)
‚úÖ Update frontend apiUrl configuration
‚úÖ Rebuild and redeploy frontend
‚úÖ Test: http://YOUR-ALB-DNS/api/actuator/health
‚úÖ Test: http://YOUR-ALB-DNS (frontend loads)
‚úÖ Test: Frontend can call backend APIs
üöÄ Next Steps (Optional):
Once basic communication works:

Set up Custom Domain (e.g., etalente.com)

Register domain in Route 53
Create ACM certificate
Add HTTPS listener to ALB
Update CORS to https://etalente.com
Update Magic Link and Invitation URLs:

MAGIC_LINK_URL=https://etalente.com/auth/verify
INVITATION_LINK_URL=https://etalente.com/invitations/accept
Start with Step 1 and let me know your ALB DNS name! Then we'll proceed step by step. üöÄ